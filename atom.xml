<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>烂笔头</title>
  
  <subtitle>好记心不如烂笔头</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.yiyiers.com/"/>
  <updated>2019-06-09T16:10:10.875Z</updated>
  <id>https://www.yiyiers.com/</id>
  
  <author>
    <name>兰桥怀远</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dubbo-spi-adaptive</title>
    <link href="https://www.yiyiers.com/2019/06/10/dubbo-spi-adaptive/"/>
    <id>https://www.yiyiers.com/2019/06/10/dubbo-spi-adaptive/</id>
    <published>2019-06-09T16:01:21.000Z</published>
    <updated>2019-06-09T16:10:10.875Z</updated>
    
    <content type="html"><![CDATA[<p>Dubbo SPI- Adaptive 笔记</p><p>Dubbo SPI Adaptive 类型的扩展有两种方式</p><h2 id="1-手工编写的-Adaptive-扩展类，如果有提供，则不会自动生成扩展类，-即优先级高于第二种"><a href="#1-手工编写的-Adaptive-扩展类，如果有提供，则不会自动生成扩展类，-即优先级高于第二种" class="headerlink" title="1. 手工编写的 Adaptive 扩展类，如果有提供，则不会自动生成扩展类， 即优先级高于第二种"></a>1. 手工编写的 Adaptive 扩展类，如果有提供，则不会自动生成扩展类， 即优先级高于第二种</h2><h3 id="配置文件-文件名必须与类的全名相同-META-INF-dubbo-com-yiyiers-learning-dubbo-HelloService"><a href="#配置文件-文件名必须与类的全名相同-META-INF-dubbo-com-yiyiers-learning-dubbo-HelloService" class="headerlink" title="配置文件(文件名必须与类的全名相同) META-INF/dubbo/com.yiyiers.learning.dubbo.HelloService"></a>配置文件(文件名必须与类的全名相同) META-INF/dubbo/com.yiyiers.learning.dubbo.HelloService</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># HelloService 普通扩展实现</span><br><span class="line">hello1=com.yiyiers.learning.dubbo.service.HelloServiceImpl</span><br><span class="line">hello2=com.yiyiers.learning.dubbo.service.HelloServiceImpl2</span><br><span class="line"></span><br><span class="line"># 人工手动实现的自适应扩展实现， 因为只能有一个自适应扩展实现，name 其实可以没有，最好还要有，比较清晰</span><br><span class="line">adaptive=com.yiyiers.learning.dubbo.service.AdaptiveHelloServiceImpl</span><br></pre></td></tr></table></figure><h3 id="AdaptiveHelloServiceImpl-扩展实现类必须有注解-Adaptive-Demo-实现细节无关"><a href="#AdaptiveHelloServiceImpl-扩展实现类必须有注解-Adaptive-Demo-实现细节无关" class="headerlink" title="AdaptiveHelloServiceImpl 扩展实现类必须有注解 @Adaptive, Demo 实现细节无关"></a>AdaptiveHelloServiceImpl 扩展实现类必须有注解 @Adaptive, Demo 实现细节无关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Adaptive // Annotation must</span><br><span class="line">public class AdaptiveHelloServiceImpl implements HelloService &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String sayHello(String hello) &#123;</span><br><span class="line"></span><br><span class="line">return ExtensionLoader.getExtensionLoader(HelloService.class).getDefaultExtension().sayHello(hello);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String sayHello(URL url, String hello) &#123;</span><br><span class="line"></span><br><span class="line">return ExtensionLoader.getExtensionLoader(HelloService.class).getDefaultExtension().sayHello(url, hello);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Dubbo-自动生成的-Adaptive-扩展类"><a href="#2-Dubbo-自动生成的-Adaptive-扩展类" class="headerlink" title="2. Dubbo 自动生成的 Adaptive 扩展类"></a>2. Dubbo 自动生成的 Adaptive 扩展类</h2><h3 id="接口方法-有-Adaptive-注解的才会自动生成代理方法，没有-Adaptive-注解的方法不支持通过自适应扩展实现调用"><a href="#接口方法-有-Adaptive-注解的才会自动生成代理方法，没有-Adaptive-注解的方法不支持通过自适应扩展实现调用" class="headerlink" title="接口方法 有 @Adaptive 注解的才会自动生成代理方法，没有@Adaptive 注解的方法不支持通过自适应扩展实现调用"></a>接口方法 有 @Adaptive 注解的才会自动生成代理方法，没有@Adaptive 注解的方法不支持通过自适应扩展实现调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@SPI(&quot;hello1&quot;)</span><br><span class="line">public interface HelloService &#123;</span><br><span class="line">  </span><br><span class="line">        // 该方法不支持自适应扩展调用</span><br><span class="line">String sayHello(String hello);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. 注解 @Adaptive 的 value 作为 url 的 key， key对应的值作为扩展名称，用来查找具体的扩展实现类</span><br><span class="line"> * 2. 如果 url = dubbo://127.0.0.1/xxx.yyyy.Serivce?hello.ext=hello2，则会使用 hello2 这个扩展实现的方法执行</span><br><span class="line"> * 3. 如果 url 没有指定 hello.ext 的值，则使用默认的扩展实现hello1</span><br><span class="line"> * </span><br><span class="line"> * @param url</span><br><span class="line"> * @param hello</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">        //@Adaptive</span><br><span class="line">        @Adaptive(&quot;hello.ext&quot;)</span><br><span class="line">String sayHello(URL url, String hello);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动生成的自适应扩展类的类名尾部都是-Adaptive-Demo-as-follows"><a href="#自动生成的自适应扩展类的类名尾部都是-Adaptive-Demo-as-follows" class="headerlink" title="自动生成的自适应扩展类的类名尾部都是 $Adaptive, Demo as follows:"></a>自动生成的自适应扩展类的类名尾部都是 $Adaptive, Demo as follows:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.yiyiers.learning.dubbo;</span><br><span class="line"></span><br><span class="line">import org.apache.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"></span><br><span class="line">public class HelloService$Adaptive implements com.yiyiers.learning.dubbo.HelloService &#123;</span><br><span class="line">    public java.lang.String sayHello(java.lang.String arg0) &#123;</span><br><span class="line">        throw new UnsupportedOperationException(</span><br><span class="line">                &quot;The method public abstract java.lang.String com.yiyiers.learning.dubbo.HelloService.sayHello(java.lang.String) of interface com.yiyiers.learning.dubbo.HelloService is not adaptive method!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public java.lang.String sayHello(org.apache.dubbo.common.URL arg0, java.lang.String arg1) &#123;</span><br><span class="line">        if (arg0 == null)</span><br><span class="line">            throw new IllegalArgumentException(&quot;url == null&quot;);</span><br><span class="line">        org.apache.dubbo.common.URL url = arg0;</span><br><span class="line">        String extName = url.getParameter(&quot;hello.ext&quot;, &quot;hello1&quot;);</span><br><span class="line">        if (extName == null)</span><br><span class="line">            throw new IllegalStateException(</span><br><span class="line">                    &quot;Failed to get extension (com.yiyiers.learning.dubbo.HelloService) name from url (&quot; + url.toString()</span><br><span class="line">                            + &quot;) use keys([hello.ext])&quot;);</span><br><span class="line">        com.yiyiers.learning.dubbo.HelloService extension = (com.yiyiers.learning.dubbo.HelloService) ExtensionLoader</span><br><span class="line">                .getExtensionLoader(com.yiyiers.learning.dubbo.HelloService.class).getExtension(extName);</span><br><span class="line">        return extension.sayHello(arg0, arg1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Dubbo SPI- Adaptive 笔记&lt;/p&gt;
&lt;p&gt;Dubbo SPI Adaptive 类型的扩展有两种方式&lt;/p&gt;
&lt;h2 id=&quot;1-手工编写的-Adaptive-扩展类，如果有提供，则不会自动生成扩展类，-即优先级高于第二种&quot;&gt;&lt;a href=&quot;#1-手工编
      
    
    </summary>
    
      <category term="dubbo" scheme="https://www.yiyiers.com/categories/dubbo/"/>
    
      <category term="code-reading" scheme="https://www.yiyiers.com/categories/dubbo/code-reading/"/>
    
    
      <category term="dubbo" scheme="https://www.yiyiers.com/tags/dubbo/"/>
    
      <category term="SPI" scheme="https://www.yiyiers.com/tags/SPI/"/>
    
      <category term="SPI-adaptive" scheme="https://www.yiyiers.com/tags/SPI-adaptive/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo SPI 扩展实现测试</title>
    <link href="https://www.yiyiers.com/2019/06/08/dubbo-spi-test/"/>
    <id>https://www.yiyiers.com/2019/06/08/dubbo-spi-test/</id>
    <published>2019-06-08T07:48:20.000Z</published>
    <updated>2019-06-09T03:04:14.621Z</updated>
    
    <content type="html"><![CDATA[<p>Dubbo-2.7.1 SPI 测试</p><p>Dubbo 提供了类似 JDK 标准 SPI(Service Provider Interface)的一套服务扩展实现，而且有所加强，<a href="http://dubbo.apache.org/zh-cn/docs/dev/SPI.html" target="_blank" rel="noopener">官方文档</a></p><blockquote><ol><li>JDK 标准 SPI 会主动实例化扩展点的所有实现，如果扩展点初始化很耗时，而且如果该扩展点被加载后不使用，也是资源浪费</li><li>通过 setter 方式，实现了 IOC &amp; AOP</li></ol></blockquote><h2 id="ExtensionLoader-Code-Comments"><a href="#ExtensionLoader-Code-Comments" class="headerlink" title="ExtensionLoader Code Comments"></a>ExtensionLoader Code Comments</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// Key:接口,Value: 接口对应的ExtensionLoder实例</span><br><span class="line">private static final ConcurrentMap&lt;Class&lt;?&gt;, ExtensionLoader&lt;?&gt;&gt; EXTENSION_LOADERS = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">// Key:接口的实现类, Value:接口实现类的实例</span><br><span class="line">private static final ConcurrentMap&lt;Class&lt;?&gt;, Object&gt; EXTENSION_INSTANCES = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">// ==========以下是 ExtensionLoader 类成员变量====================</span><br><span class="line"></span><br><span class="line">// 需要扩展的接口类型</span><br><span class="line">private final Class&lt;?&gt; type;</span><br><span class="line"></span><br><span class="line">// 具体的扩展对象工厂，ExtensionFactory 自己的扩展的对象工厂为null</span><br><span class="line">private final ExtensionFactory objectFactory;</span><br><span class="line"></span><br><span class="line">// Key:接口实现类, Value:实现类的名称（name）</span><br><span class="line">private final ConcurrentMap&lt;Class&lt;?&gt;, String&gt; cachedNames = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">// Key:实现类的名称（name）, Value: 接口的实现类；和 cachedNames key-value 调换了一下</span><br><span class="line">private final Holder&lt;Map&lt;String, Class&lt;?&gt;&gt;&gt; cachedClasses = new Holder&lt;&gt;();</span><br><span class="line"></span><br><span class="line">// 缓存的自动激活的扩展点,Key: 接口实现类的名称（name）, Value: @Activate的配置实例</span><br><span class="line">private final Map&lt;String, Object&gt; cachedActivates = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">// 扩展的对象实例</span><br><span class="line">private final ConcurrentMap&lt;String, Holder&lt;Object&gt;&gt; cachedInstances = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">// 自适应扩展类最多只允许有一个</span><br><span class="line">private final Holder&lt;Object&gt; cachedAdaptiveInstance = new Holder&lt;&gt;();</span><br><span class="line"></span><br><span class="line">// 自适应扩展类最多只允许有一个</span><br><span class="line">private volatile Class&lt;?&gt; cachedAdaptiveClass = null;</span><br><span class="line">private String cachedDefaultName;</span><br><span class="line"></span><br><span class="line">// Wrapper 类，可以有多个,达到Wrapper 的 Wrapper ...的效果</span><br><span class="line">private Set&lt;Class&lt;?&gt;&gt; cachedWrapperClasses</span><br></pre></td></tr></table></figure><h2 id="ExtensionLoader-的简单测试"><a href="#ExtensionLoader-的简单测试" class="headerlink" title="ExtensionLoader 的简单测试"></a>ExtensionLoader 的简单测试</h2><p>HelloService 接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.yiyiers.learning.dubbo;</span><br><span class="line"></span><br><span class="line">import org.apache.dubbo.common.URL;</span><br><span class="line">import org.apache.dubbo.common.extension.Adaptive;</span><br><span class="line">import org.apache.dubbo.common.extension.SPI;</span><br><span class="line"></span><br><span class="line">@SPI(&quot;dennis&quot;)</span><br><span class="line">public interface HelloService &#123;</span><br><span class="line"></span><br><span class="line">String sayHello(String hello);</span><br><span class="line"></span><br><span class="line">@Adaptive</span><br><span class="line">String sayHello(URL url, String hello);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloService 接口的普通实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class HelloServiceImpl implements HelloService &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String sayHello(String hello) &#123;</span><br><span class="line"></span><br><span class="line">return &quot;Hello! &quot; + hello;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String sayHello(URL url, String hello) &#123;</span><br><span class="line">return url + &quot;, Hello! &quot; + hello;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloService 接口的自适应扩展实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Adaptive // Annotation must</span><br><span class="line">public class AdaptiveHelloServiceImpl implements HelloService &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String sayHello(String hello) &#123;</span><br><span class="line"></span><br><span class="line">return ExtensionLoader.getExtensionLoader(HelloService.class).getDefaultExtension().sayHello(hello);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String sayHello(URL url, String hello) &#123;</span><br><span class="line"></span><br><span class="line">return ExtensionLoader.getExtensionLoader(HelloService.class).getDefaultExtension().sayHello(url, hello);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时提供两个 HelloService 的 Wrapper 实现，输出效果：<br><code>Wrapper2 [Wrapper1 [Hello! DENNIS]]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class HelloService1Wrapper implements HelloService &#123;</span><br><span class="line"></span><br><span class="line">private HelloService helloService;</span><br><span class="line"></span><br><span class="line">public HelloService1Wrapper(HelloService helloService) &#123;</span><br><span class="line">this.helloService = helloService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String sayHello(String hello) &#123;</span><br><span class="line"></span><br><span class="line">return &quot;Wrapper1 [&quot; + helloService.sayHello(hello) + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String sayHello(URL url, String hello) &#123;</span><br><span class="line">return &quot;Wrapper1 [&quot; + helloService.sayHello(url, hello) + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class HelloService2Wrapper implements HelloService &#123;</span><br><span class="line"></span><br><span class="line">private HelloService helloService;</span><br><span class="line"></span><br><span class="line">public HelloService2Wrapper(HelloService helloService) &#123;</span><br><span class="line">this.helloService = helloService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String sayHello(String hello) &#123;</span><br><span class="line"></span><br><span class="line">return &quot;Wrapper2 [&quot; + helloService.sayHello(hello) + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String sayHello(URL url, String hello) &#123;</span><br><span class="line">return &quot;Wrapper2 [&quot; + helloService.sayHello(url, hello) + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件 META-INF/dubbo/com.yiyiers.learning.dubbo.HelloService</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># HelloService 默认扩展实现</span><br><span class="line">dennis=com.yiyiers.learning.dubbo.service.HelloServiceImpl</span><br><span class="line"></span><br><span class="line"># 人工手动实现的自适应扩展实现，注释掉该实现，ExtensionLoader.getExtensionLoader(HelloService.class).getAdaptiveExtension() 会</span><br><span class="line"># 自动生成自适应扩展实现</span><br><span class="line">adaptive=com.yiyiers.learning.dubbo.service.AdaptiveHelloServiceImpl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Wrapper 实现了类似 AOP 的功能</span><br><span class="line">wrapper1=com.yiyiers.learning.dubbo.service.HelloService1Wrapper</span><br><span class="line">wrapper2=com.yiyiers.learning.dubbo.service.HelloService2Wrapper</span><br></pre></td></tr></table></figure><p>ExtensionLoader 测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class ExtensionLoaderTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">// test auto-active extension</span><br><span class="line">URL url = new URL(&quot;http&quot;, &quot;127.0.0.1&quot;, 8080, HelloService.class.getCanonicalName()).addParameter(&quot;filter&quot;,</span><br><span class="line">&quot;-cache,-echo,-trace,-timeout&quot;);</span><br><span class="line">List&lt;Filter&gt; activeFilters = ExtensionLoader.getExtensionLoader(Filter.class).getActivateExtension(url,</span><br><span class="line">&quot;filter&quot;);</span><br><span class="line">System.out.println(String.format(&quot;auto-active %d Filters as follows:&quot;, activeFilters.size()));</span><br><span class="line">activeFilters.forEach(s -&gt; System.out.println(&quot;\t&quot; + s));</span><br><span class="line"></span><br><span class="line">// General service implement</span><br><span class="line">HelloService helloService = ExtensionLoader.getExtensionLoader(HelloService.class).getExtension(&quot;dennis&quot;);</span><br><span class="line">System.out.println(helloService.getClass().getCanonicalName());</span><br><span class="line">System.out.println(helloService.sayHello(&quot;DENNIS&quot;));</span><br><span class="line"></span><br><span class="line">// Adaptive service implement</span><br><span class="line">helloService = ExtensionLoader.getExtensionLoader(HelloService.class).getAdaptiveExtension();</span><br><span class="line">System.out.println(helloService.getClass().getCanonicalName());</span><br><span class="line">System.out.println(helloService.sayHello(new URL(&quot;file&quot;, &quot;/home&quot;, 0), &quot;DENNIS&quot;));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>ExtensionLoader 是个对象工厂，每个接口对应一个ExtensionLoader 实例，缓存在 ExtensionLoader 的静态变量中（成员变量中也有缓存容器)，而且只有使用到接口的实现时才会主动创建具体的接口实例</li><li>自动激活的扩展实现，通常有多个实现，列如 Filter, Listener 等，可以根据 URL 参数自动激活指定实现</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Dubbo-2.7.1 SPI 测试&lt;/p&gt;
&lt;p&gt;Dubbo 提供了类似 JDK 标准 SPI(Service Provider Interface)的一套服务扩展实现，而且有所加强，&lt;a href=&quot;http://dubbo.apache.org/zh-cn/docs/
      
    
    </summary>
    
      <category term="dubbo" scheme="https://www.yiyiers.com/categories/dubbo/"/>
    
      <category term="code-reading" scheme="https://www.yiyiers.com/categories/dubbo/code-reading/"/>
    
    
      <category term="dubbo" scheme="https://www.yiyiers.com/tags/dubbo/"/>
    
      <category term="SPI" scheme="https://www.yiyiers.com/tags/SPI/"/>
    
  </entry>
  
</feed>
